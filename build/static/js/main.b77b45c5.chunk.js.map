{"version":3,"sources":["serviceWorker.js","Componets/TodoInput.js","Componets/TodoItems.js","Componets/App.js","index.js"],"names":["Boolean","window","location","hostname","match","TodoInput","state","focus","atTop","file","content","completed","date","comment","clearState","_this","setState","onSubmithandler","_callee","ev","response","regenerator_default","a","wrap","_context","prev","next","preventDefault","axios","get","sent","data","props","getInputData","stop","onChangehandler","Object","defineProperty","target","name","value","prevProps","prevState","_this$props","this","react_default","createElement","Card","fluid","Content","Form","widths","onSubmit","Grid","verticalAlign","textAlign","Column","width","Icon","link","size","style","display","concat","Input","action","icon","actionPosition","onFocus","onFocusHandler","bind","onChange","marginLeft","Group","inline","type","placeholder","Row","Button","TextArea","rows","className","marginTop","positive","onClick","negative","onBlurHandler","renderForm","React","Component","TodoLists","_ref","todos","IconClickHandler","List","relaxed","divided","map","todo","Item","key","id","floated","data-iconname","data-itemid","color","Header","basic","App","show","editTodo","NaN","newtodos","toConsumableArray","Date","now","push","updateCompleted","idx","assign","splice","updateAtTop","unshift","editExistTodos","deleteTodo","onIconClickHandler","parseInt","currentTarget","dataset","itemid","findIndex","item","iconname","menuItemClick","e","filterTodos","_this$state","filter","Container","margin","as","Divider","Menu","pointing","secondary","active","stackable","centered","Componets_TodoInput","ReactDOM","render","Componets_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b77b45c5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport { Form, Icon,Grid, TextArea,Card,Button } from 'semantic-ui-react';\r\n\r\n\r\nclass TodoInput extends React.Component{\r\n\r\n    state = { focus:'none',\r\n    atTop: false,\r\n    file: false,\r\n    'content': '',\r\n    'completed': false,\r\n    'date': '',\r\n    'comment': '',\r\n    };\r\n\r\n    componentDidUpdate(prevProps,prevState) {\r\n\r\n      const {atTop,comment,completed,content,date,file} = this.props;\r\n      if(content !== prevState.content &&\r\n         content !== prevProps.content ){\r\n          /*console.log('props.content',content);\r\n          console.log('prevProps.content',prevProps.content);\r\n          console.log('prevState.content',prevState.content);*/\r\n        this.setState({\r\n          focus:'block',\r\n          atTop: atTop,\r\n          file: file,\r\n          'content': content,\r\n          'completed': completed,\r\n          'date': date,\r\n          'comment': comment,\r\n        });\r\n      }\r\n    }\r\n\r\n    clearState = ()=>{\r\n      this.setState({\r\n        focus:'none',\r\n        atTop: false,\r\n        file: false,\r\n        'content': '',\r\n        'completed': false,\r\n        'date': '',\r\n        'comment': '',\r\n      });\r\n    }\r\n\r\n    onSubmithandler = async (ev) => {\r\n      ev.preventDefault();\r\n\r\n      if(this.state['content']===''){\r\n        const response = await axios.get('https://api.github.com/zen');\r\n        this.setState({'content':response.data});\r\n      }\r\n      this.props.getInputData(this.state);\r\n      this.clearState();\r\n    }\r\n\r\n    onChangehandler = (ev)=>{\r\n      this.setState({[ev.target.name]:ev.target.value});\r\n    }\r\n\r\n    onFocusHandler(){\r\n      this.setState({focus:'block'});\r\n    }\r\n\r\n    onBlurHandler(){\r\n      this.setState({focus:'none'});\r\n    }\r\n\r\n    renderForm(){\r\n\r\n      return(\r\n        <Card fluid >\r\n        <Card.Content>\r\n        <Form widths='equal' onSubmit={this.onSubmithandler} >\r\n\r\n            <Grid verticalAlign='middle' textAlign='justified'>\r\n            <Grid.Column width='1'>\r\n            <Icon link size='big' name='square outline' style={{display:`${this.state.focus}`}}/>\r\n            </Grid.Column>\r\n            <Grid.Column width='13'>\r\n            <Form.Input size='huge' fluid\r\n              name='content'\r\n              value={this.state['content']}\r\n              action={{ icon: 'add' }}\r\n              actionPosition='left'\r\n              onFocus={this.onFocusHandler.bind(this)}\r\n              onChange={this.onChangehandler}/>\r\n            </Grid.Column>\r\n            <Grid.Column width='2'>\r\n            <Icon link size='big' name='star outline' style={{display:`${this.state.focus}`}}/>\r\n            </Grid.Column>\r\n            </Grid>\r\n\r\n            <Grid textAlign='left' style={{marginLeft:'20px', display:`${this.state.focus}`}}>\r\n            <Grid.Column width='16'>\r\n              <Icon  name=\"calendar outline\" size='large' /><b>Due Date </b>\r\n              <Form.Group inline>\r\n                <Form.Input fluid\r\n                  type='date'\r\n                  placeholder='yyyy:MM:dd'\r\n                  name='date'\r\n                  value={this.state['date']}\r\n                  onChange={this.onChangehandler}/>\r\n                <Form.Input fluid placeholder='hh:mm' type='time' name='date-end' />\r\n              </Form.Group>\r\n            </Grid.Column>\r\n            <Grid.Row>\r\n              <Grid.Column width='3'>\r\n                <Icon name=\"file outline\" size='large' /><b>FILE </b>\r\n                <Form.Button icon={{name:'add square'}} />\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Column width='16'>\r\n              <Icon  name=\"comment outline\"  size='large' /><b>Comment </b>\r\n              <TextArea\r\n                rows='3'\r\n                placeholder='Add comment here'\r\n                name='comment'\r\n                value={this.state['comment']}\r\n                onChange={this.onChangehandler}\r\n                />\r\n            </Grid.Column >\r\n          </Grid>\r\n        </Form>\r\n\r\n        </Card.Content>\r\n          <div className='ui two buttons ' style={{marginTop: '16px', display:`${this.state.focus}`}}>\r\n          <Button  positive onClick={this.onSubmithandler.bind(this)}> Accpet</Button>\r\n          <Button  negative onClick={this.onBlurHandler.bind(this)}> Cancel</Button>\r\n          </div>\r\n        </Card>\r\n\r\n      );\r\n    }\r\n\r\n    render(){\r\n      return(\r\n        this.renderForm()\r\n      );\r\n    }\r\n}\r\n\r\nexport default TodoInput;\r\n","import React from 'react';\r\nimport { List,Button, Icon } from 'semantic-ui-react';\r\n\r\nexport function TodoLists({todos,IconClickHandler}) {\r\n    return (\r\n      <List size=\"big\" relaxed='very' verticalAlign='middle' divided>\r\n        {todos.map((todo)=>{return(\r\n          <List.Item key={todo.id}>\r\n            <List.Content floated='right' >\r\n                <List.Icon link\r\n                  name='edit outline'\r\n                  size='big'\r\n                  data-iconname='edit'\r\n                  data-itemid={todo.id}\r\n                  onClick={IconClickHandler}/>\r\n                <List.Icon link\r\n                  name={todo.atTop? 'star':'star outline' }\r\n                  color={todo.atTop? 'yellow':'black'}\r\n                  size='big'\r\n                  data-iconname='atTop'\r\n                  data-itemid={todo.id}\r\n                  onClick={IconClickHandler}/>\r\n            </List.Content>\r\n\r\n            <List.Icon\r\n               link\r\n               size='large'\r\n               name={todo.completed?'check square outline':'square outline'}\r\n               data-iconname='completed'\r\n               data-itemid={todo.id}\r\n               onClick={IconClickHandler}/>\r\n            <List.Content verticalAlign='middle'>\r\n                <List.Header > {todo.content}\r\n                  <Button basic icon\r\n                    floated='right'\r\n                    data-itemid={todo.id}\r\n                    data-iconname='delete'\r\n                    onClick={IconClickHandler}>\r\n                      <Icon name='delete' color='red'/>\r\n                  </Button>\r\n                </List.Header >\r\n            </List.Content>\r\n            <List.Content style={{marginLeft:'2rem', marginTop:'.5rem'}}>\r\n                {todo.date?<List.Icon  name=\"calendar outline\"/>   :''}{todo.date}\r\n                {todo.file?<List.Icon  name=\"file outline\"  />:''}\r\n                {todo.comment?<List.Icon  name=\"comment outline\" />:''}\r\n            </List.Content>\r\n          </List.Item>\r\n        )})}\r\n      </List>\r\n\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport {\r\n  Container,Divider,\r\n  Grid,Header, Menu} from 'semantic-ui-react';\r\n\r\nimport TodoInput from './TodoInput';\r\nimport {TodoLists} from './TodoItems';\r\n//import  TodoLists  from './TodoLists';\r\n\r\n\r\n/*\r\none todo has\r\n1. content\r\n1-1. id(private)\r\n----- n: outline\r\n2. edit, y:blue,\r\n3. completed, y: gold,\r\n4. atTop y: gold,\r\n5. date, file, comment, y:exist, n: no show\r\n */\r\n\r\nclass App extends React.Component{\r\n//class TabContent extends React.Component{\r\n  state={\r\n    todos:[],\r\n    show:'My Task',\r\n    editTodo: {\r\n      id:NaN,\r\n      content:'',\r\n      completed:false,\r\n      atTop:false,\r\n      date:'',\r\n      file:false,\r\n      comment:'',\r\n    },\r\n  };\r\n\r\n  getInputData = (data)=>{\r\n    let todo={};\r\n    let newtodos=[...this.state.todos];\r\n    todo.content=data['content'];\r\n    todo.id=Date.now();\r\n    todo.completed=data['completed'];\r\n    todo.atTop=data.atTop;\r\n    todo.date=data['date'];\r\n    todo.file=data.file;\r\n    todo.comment=data['comment'];\r\n    newtodos.push(todo);\r\n    this.setState({todos: newtodos});\r\n  }\r\n\r\n  updateCompleted = (name,idx)=>{\r\n    let newtodos=[...this.state.todos];\r\n    let todo=Object.assign({},this.state.todos[idx]);\r\n    todo[name]=!todo[name];\r\n    newtodos.splice(idx,1);\r\n    newtodos.push(todo);\r\n    this.setState({todos: newtodos});\r\n  }\r\n\r\n  updateAtTop = (name,idx) =>{\r\n    let newtodos=[...this.state.todos];\r\n    let todo=Object.assign({},this.state.todos[idx]);\r\n    todo[name]=!todo[name];\r\n    newtodos.splice(idx,1);\r\n    newtodos.unshift(todo);\r\n    this.setState({todos: newtodos});\r\n  }\r\n\r\n  editExistTodos = (idx)=>{\r\n    let todo=Object.assign({},this.state.todos[idx]);\r\n    this.setState({editTodo:todo});\r\n  }\r\n\r\n  deleteTodo = (idx)=>{\r\n    let newtodos=[...this.state.todos];\r\n    newtodos.splice(idx,1);\r\n    this.setState({todos: newtodos});\r\n  }\r\n\r\n  onIconClickHandler = (ev)=>{\r\n    let id=parseInt(ev.currentTarget.dataset.itemid);\r\n    let idx=this.state.todos.findIndex((item)=>item.id===id);\r\n\r\n    switch(ev.currentTarget.dataset.iconname){\r\n      case 'completed':\r\n        this.updateCompleted('completed',idx);\r\n      break;\r\n      case 'atTop':\r\n        this.updateAtTop('atTop',idx);\r\n      break;\r\n      case 'edit':\r\n        this.editExistTodos(idx);\r\n      break;\r\n      case 'delete':\r\n        this.deleteTodo(idx);\r\n      break;\r\n      default:\r\n      break;\r\n    }\r\n  }\r\n\r\n  menuItemClick = (e,{name})=>(this.setState({show:name}))\r\n\r\n  filterTodos = ()=>{\r\n    const {show, todos} = this.state;\r\n    if(show === 'My Task')\r\n      return todos;\r\n    if(show === 'In Progress')\r\n      return todos.filter((todo)=>!todo.completed);\r\n    if(show === 'Completed')\r\n      return todos.filter((todo)=>todo.completed);\r\n  }\r\n\r\n  render() {\r\n  return (\r\n    <Container style={{margin:'3rem auto'}}>\r\n      <Header as='h2'>Semantic UI React TodoList version</Header>\r\n      <Divider />\r\n      <Menu widths='12' pointing secondary>\r\n        <Menu.Item\r\n          name='My Task'\r\n          active={this.state.show === 'My Task'}\r\n          onClick={this.menuItemClick}/>\r\n        <Menu.Item\r\n          name='In Progress'\r\n          active={this.state.show === 'In Progress'}\r\n          onClick={this.menuItemClick}/>\r\n        <Menu.Item\r\n          name='Completed'\r\n          active={this.state.show === 'Completed'}\r\n          onClick={this.menuItemClick}/>\r\n      </Menu>\r\n\r\n      <Grid stackable centered  >\r\n\r\n        <Grid.Column  width={10} >\r\n            <TodoInput getInputData={this.getInputData }  {...this.state.editTodo} />\r\n        </Grid.Column>\r\n\r\n        <Grid.Column width={10}>\r\n           <TodoLists\r\n             todos={this.filterTodos(this.props.completed)}\r\n             IconClickHandler={this.onIconClickHandler.bind(this)}/>\r\n        </Grid.Column>\r\n\r\n      </Grid>\r\n    </Container>\r\n\r\n  );\r\n  }\r\n}\r\n/*\r\nconst panes = [\r\n  {\r\n    menuItem:'My Task',\r\n    pane:{\r\n      key:'mytask',\r\n      content:(<TabContent logo='My Task'/>),\r\n    }\r\n  },\r\n  {\r\n    menuItem:'In progress',\r\n    pane:{\r\n      key:'inprogress',\r\n      content:(<TabContent logo='In progress' completed={false}/>),\r\n    }\r\n  },\r\n  {\r\n    menuItem:'Completed',\r\n    pane:{\r\n      key:'completed',\r\n      content:(<TabContent logo='Completed' completed={true} />),\r\n    }\r\n  },\r\n]\r\n*/\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport App from './Componets/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}